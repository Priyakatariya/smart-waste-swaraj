// src/app/dashboard/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useData } from '../../contexts/DataContext';
import { WasteListing, User } from '../../types'; // Import types
import { FaBoxes, FaLeaf, FaSpinner, FaCheckCircle, FaMapMarkedAlt, FaClipboardCheck } from 'react-icons/fa';
import styles from './dashboard.module.css'; // Import module CSS

export default function DashboardPage() {
  const { currentUser, loading, wasteListings, users, assignCollectorToListing, completeListing } = useData();
  const router = useRouter();

  // No longer need local loading state, rely directly on dataContext.loading
  useEffect(() => {
    // Only redirect if DataContext has finished loading AND there's no current user
    if (!loading && !currentUser) {
      router.push('/auth/login');
    }
  }, [currentUser, loading, router]); // Depend on loading from context

  if (loading) { // Use 'loading' directly from context
    return (
      <div className={styles.loadingContainer}>
        <FaSpinner className={styles.loadingSpinner} />
        <p className={styles.loadingText}>Loading Dashboard Data...</p>
      </div>
    );
  }

  // If loading is false but currentUser is null (meaning not logged in), show access denied
  if (!currentUser) {
    // This case is already handled by the useEffect redirect, but for robustness:
    return (
      <div className={styles.unauthorizedContainer}>
        <h1>Access Denied</h1>
        <p>Please log in to view your Dashboard.</p>
        <button className={styles.loginRedirectButton} onClick={() => router.push('/auth/login')}>Go to Login</button>
      </div>
    );
  }

  const userListings: WasteListing[] = currentUser?.userType === 'generator'
    ? wasteListings.filter((listing: WasteListing) => listing.userId === currentUser.id)
    : wasteListings.filter((listing: WasteListing) => listing.assignedCollectorId === currentUser?.id || (listing.status === 'pending' && listing.itemType === 'waste')); // Collectors see pending waste

  const pendingListings = userListings.filter((listing: WasteListing) => listing.status === 'pending');
  const completedListings = userListings.filter((listing: WasteListing) => listing.status === 'completed');

  const getGeneratorName = (userId: string) => {
    const generator = users.find((u: User) => u.id === userId && u.userType === 'generator');
    return generator ? generator.name ?? generator.email.split('@')[0] : 'Unknown Generator';
  };

  const getCollectorName = (collectorId: string | undefined) => {
    if (!collectorId) return 'Unassigned';
    const collector = users.find((u: User) => u.id === collectorId && u.userType === 'collector');
    return collector ? collector.name || collector.email.split('@')[0] : 'Unknown Collector';
  };

  const Card = ({ title, value, icon, bgColor }: { title: string; value: number | string; icon: React.ReactNode; bgColor: string }) => (
    <div className={`${styles.dashboardCard} ${bgColor}`}>
      <div>
        <h3 className={styles.cardTitle}>{title}</h3>
        <p className={styles.cardValue}>{value}</p>
      </div>
      <div className={styles.cardIcon}>{icon}</div>
    </div>
  );

  const ListingCard = ({ listing, isCollectorView }: { listing: WasteListing; isCollectorView: boolean }) => (
    <div className={styles.listingCard}>
      <div>
        <h4 className={styles.listingTitle}>{listing.wasteType} - {listing.quantity} {listing.unit}</h4>
        <p className={styles.listingStatusText}>Status: <span className={`${styles.listingStatus} ${
          listing.status === 'pending' ? styles.statusPending :
          listing.status === 'assigned' ? styles.statusAssigned :
          styles.statusCompleted
        }`}>{listing.status}</span></p>
        {isCollectorView && (
          <p className={styles.listingDetail}>Generated by: {getGeneratorName(listing.userId)}</p>
        )}
        {!isCollectorView && listing.status !== 'pending' && (
          <p className={styles.listingDetail}>Assigned to: {getCollectorName(listing.assignedCollectorId)}</p>
        )}
        <p className={styles.listingDetail}>Listed: {new Date(listing.createdAt).toLocaleDateString()}</p>
        {listing.description && (
          <p className={styles.listingDescription}>{listing.description}</p>
        )}
        {listing.itemType === 'old_item' && listing.price && (
          <p className={styles.listingDetail}>Price: ₹{listing.price.toFixed(2)}</p>
        )}
        {listing.imageUrl && (
          <img src={listing.imageUrl} alt={listing.wasteType} className={styles.listingImagePreview} onError={(e) => { e.currentTarget.src = 'https://placehold.co/150x100/e0e0e0/555555?text=No+Img'; }} />
        )}
      </div>
      <div className={styles.listingActions}>
        <button
          onClick={() => router.push(`/map?listingId=${listing.id}`)}
          className={styles.viewMapButton}
        >
          <FaMapMarkedAlt className={styles.buttonIcon} /> View on Map
        </button>
        {isCollectorView && (
          <div className={styles.collectorActions}>
            {listing.status === 'pending' && listing.itemType === 'waste' && ( // Only collectors can assign waste
              <button
                onClick={() => assignCollectorToListing(listing.id, currentUser!.id)}
                className={styles.actionButtonAssign}
              >
                <FaClipboardCheck className={styles.buttonIcon} /> Assign to me
              </button>
            )}
            {listing.status === 'assigned' && listing.assignedCollectorId === currentUser?.id && (
              <button
                onClick={() => completeListing(listing.id)}
                className={styles.actionButtonComplete}
              >
                <FaCheckCircle className={styles.buttonIcon} /> Mark Complete
              </button>
            )}
             {listing.itemType === 'old_item' && ( // "Buy/Contact Seller" for old items
              <button
                onClick={() => alert(`Contacting ${getGeneratorName(listing.userId)} about ${listing.wasteType} for ₹${listing.price || 'N/A'}. (Simulated action)`)}
                className={styles.actionButtonContact}
              >
                <FaClipboardCheck className={styles.buttonIcon} /> View/Contact
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className={styles.dashboardContainer}>
      <h1 className={styles.welcomeTitle}>
        Welcome, {currentUser?.name || currentUser?.email.split('@')[0]}!
      </h1>

      <div className={styles.statsGrid}>
        <Card
          title="Total Listings"
          value={userListings.length}
          icon={<FaBoxes />}
          bgColor={styles.cardBgBlue}
        />
        <Card
          title="Pending"
          value={pendingListings.length}
          icon={<FaLeaf />}
          bgColor={styles.cardBgOrange}
        />
        <Card
          title="Completed"
          value={completedListings.length}
          icon={<FaCheckCircle />}
          bgColor={styles.cardBgGreen}
        />
      </div>

      <h2 className={styles.listingsSectionTitle}>
        {currentUser?.userType === 'generator' ? 'Your Waste Listings' : 'Waste/Items for Collection'}
      </h2>

      <div className={styles.listingsGrid}>
        {userListings.length > 0 ? (
          userListings.sort((a, b) => {
            const dateA = typeof a.createdAt === 'string' ? new Date(a.createdAt).getTime() : a.createdAt;
            const dateB = typeof b.createdAt === 'string' ? new Date(b.createdAt).getTime() : b.createdAt;
            return dateB - dateA;
          }).map(listing => (
            <ListingCard key={listing.id} listing={listing} isCollectorView={currentUser?.userType === 'collector'} />
          ))
        ) : (
          <p className={styles.noListingsMessage}>
            {currentUser?.userType === 'generator'
              ? "You haven't listed any waste or items yet. Go to 'List Waste' or the 'Waste & Item Map' to add one!"
              : "No waste or items currently available for collection or assigned to you."}
          </p>
        )}
      </div>

      {currentUser?.userType === 'generator' && (
        <div className={styles.listWasteAction}>
          <button
            onClick={() => router.push('/list-waste')}
            className={styles.listWasteButton}
          >
            List New Waste / Item
          </button>
        </div>
      )}
    </div>
  );
}